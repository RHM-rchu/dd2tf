// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/dashboard.tmpl (26.295kB)
// tmpl/monitor.tmpl (1.548kB)
// tmpl/screenboard.tmpl (8.376kB)
// tmpl/timeboard.tmpl (2.261kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplDashboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x4b\x73\xdb\x38\xd2\xf7\xfc\x0a\x94\x4e\xdf\x97\x9a\x49\xee\x5b\x93\x43\x12\xdb\x93\x54\xd9\x89\x37\xf6\x64\x32\xbb\xb3\xc5\x82\x48\x48\xc2\x9a\x24\x18\x10\x94\xac\xa8\xf4\xdf\xb7\xf0\x20\x88\x27\x05\xc9\x52\x5e\x65\x1f\x52\x61\x77\xa3\x9b\x68\x34\x1a\x8d\x46\x83\xa2\xa8\x25\x1d\xcd\x11\x98\x14\x90\xc1\x82\xcc\xb3\x02\xb6\x8b\x29\x81\xb4\x98\x80\x49\x51\x64\x9b\x0d\x78\xf6\xb6\x00\xdb\xed\x04\x6c\x9e\x00\xc0\x30\x2b\x11\x90\x7f\x2f\xc0\x84\x63\x6f\x05\x68\xbb\x9d\x3c\x01\xa0\x84\x6b\xd2\xb1\x8c\xad\x1b\xd4\xa3\x2f\x05\xe8\x96\x43\x24\xcd\x66\x03\xf0\x0c\x3c\x3b\x43\x6d\x4e\x71\xc3\x30\xa9\xc1\xaf\xdb\xed\x13\x00\x0a\x03\xf2\x02\xfc\xf6\xdb\xf9\xfb\xdb\x27\x9b\x0d\x40\x6d\x0e\x1b\xf4\x7a\x01\x29\xcc\x19\xa2\xad\xdd\x74\xbb\x7d\xc2\xe9\x38\xdb\x5f\x01\xaa\xf9\x9b\x6e\x36\xcf\x9f\x72\x11\x4f\x9f\x0b\xb6\x4a\xde\x1f\xb4\x54\x72\x3a\x5a\x0e\x6f\xcf\xc1\xfd\x7b\x8d\x33\xb8\x45\x55\x53\x42\x86\x3e\x42\x8a\xe1\xb4\x44\xad\x62\xb7\xd9\x00\x0a\xeb\x39\x0a\x51\x08\x02\xa6\xc0\xd9\x52\xc1\x85\x26\x01\xa8\x61\x85\x0c\x3d\xbe\xe3\x8f\xf2\x55\xb4\xcc\x6b\x8a\x66\xf8\x5e\x09\x02\xa0\x91\x8f\x7d\x0b\x85\x1d\xda\x44\x3a\x60\xe8\x7c\x06\xbb\x92\x69\x7e\x85\x7a\x7e\x01\x22\x7a\x96\x68\xcd\x24\xc2\x7f\xeb\x6b\x4f\x6a\x44\x2b\x70\x5c\xb3\xef\x08\xc3\xb3\xf5\x25\x6e\xfb\x37\xab\x05\x20\x2b\x39\x84\xf7\xf6\xdf\x9b\x8d\x52\xf1\x40\xba\xdd\x4e\x36\x9b\x67\xdb\xed\xe4\x97\xcd\x06\xd5\xc5\x76\xfb\x1f\x4b\x52\x7c\xdc\xae\x29\x6a\x11\xdb\x3d\x7a\x3d\x5d\x78\x0c\xb3\x46\xa0\x9d\xa1\x1c\x1d\xcc\x98\x01\x25\x98\x50\xdc\x88\xc6\xcd\x08\x80\x25\x2c\x3b\x34\x60\x3f\x8a\xc7\x1e\x1d\x1c\x57\x6b\xe8\x4e\x34\xea\xaa\xb7\x7f\xe2\x62\xae\x55\xbc\x12\x0f\xaa\x5b\x9b\x0d\x98\x96\x24\xbf\x03\x13\x49\x73\x4d\xd1\x04\x3c\x33\x15\xc6\x35\x2a\x7d\x8b\x09\x5d\x61\xb6\xf0\xe0\xd2\x2b\x71\x2b\x57\x4a\xb9\xd7\x1e\x8c\xeb\xe4\x53\xaf\x63\x00\xd6\x16\xe2\xaf\x01\xb1\xc2\x05\x5b\x68\xc4\x9f\xe2\x49\x23\x17\x08\xcf\x17\xac\x47\xbe\x91\x4f\x0a\x1b\x54\xa2\x78\xcb\xdd\x1a\xf6\x50\x52\x25\xe6\xac\x96\xfd\x3d\x43\x33\x5c\x63\xc3\x95\x0a\xdc\x33\xe5\x74\xb3\x62\x40\xf7\x1a\x18\xf4\x7b\xb3\x80\x65\x49\x56\x52\xcd\xa6\x8e\xa5\x74\x3c\x03\xe8\x33\xf8\xbf\x33\xf4\x01\xcd\x6e\x18\xc5\xf5\x5c\xf2\xfd\x7f\x30\x81\x25\xa2\x2c\x9b\x53\xd8\x2c\x26\x83\x32\x4c\xde\xb7\x6f\x6f\x2f\xcf\x6d\x9e\xc3\x6c\x10\xcb\x86\x89\x90\x6b\x4b\xc4\x17\xf5\xab\x8c\xc1\x26\xaa\x35\x57\xca\x0d\xfe\x12\x90\x94\xb5\x1c\x2c\xc7\x6c\x20\x3b\x4c\xc2\xcb\x12\xcf\xeb\x80\x08\x28\xe0\xe6\x42\x29\x29\x87\xf9\x99\x20\x26\x66\x02\x21\x85\xe3\x0a\x45\xf5\x5d\x21\x17\x2e\xad\xc7\xc3\x30\x0e\x18\x66\x8b\x39\xe1\xf0\x12\xdd\x34\xd0\xee\x2a\x00\x25\x5e\xa2\xac\xe5\xf0\x7e\xd1\xef\xe9\xcc\x8e\x3a\xee\x59\xfe\x45\x3b\x6a\xcf\x91\xa3\x29\x8a\xf7\xe2\x25\x37\xdc\xb7\x85\xd5\x09\x69\xcc\xb8\xe8\x7b\xd0\xd3\x84\x47\xca\xe5\xf8\x11\x7f\x11\x93\xcd\xe4\xb8\xc4\x5f\xac\x40\xa8\xa7\x19\xe5\x28\x00\x65\x8b\x76\xcf\x3b\xe1\xd8\xdd\x79\xd7\xaf\x12\xce\xd4\x3b\xbd\x02\xae\x29\xca\x71\x6b\x3a\x20\x20\xe3\x15\x05\x95\xd3\x6c\xa0\x0a\x8e\x9b\xcb\xf4\x8f\x1a\x33\x8b\x5f\xc7\x01\x7d\xe0\xc6\xff\x9f\xf6\x72\xb7\xe8\x9e\x05\x66\x28\xba\x67\xce\x04\xd5\x74\x0f\x1e\xa3\x7c\xc1\x57\xb8\x84\xe1\x89\x12\xa8\x99\x1c\x18\xbd\x0f\xe8\x73\x87\x5a\xd6\xba\xb3\x59\x2d\xaa\x1a\x6d\x60\xa9\x84\x85\xa6\xf4\x15\x62\x14\xe7\xff\xec\x10\x5d\x3b\xb3\xfa\x73\xaf\x17\x93\x24\x36\xa1\x83\x53\x52\x0b\x79\x2d\xd4\xe1\x4d\x11\x00\xa4\x9e\xac\x79\x62\xd0\xee\xf4\x1e\x83\x00\x52\x35\x90\xa1\x5b\xe2\xf2\xe7\x70\x8a\x32\x46\x34\x7b\x4d\x99\xce\xfd\x6d\x9d\x53\x04\x5b\xf4\x3b\x21\x85\x23\x00\x2b\x54\x36\xe7\x38\x69\xe6\x16\xb9\xc3\x2f\x2e\xe4\x3d\x2d\x10\x7d\xe5\x0e\x02\xe1\xd0\x6c\xba\xee\x5f\xbf\xa7\x4a\x7f\x79\xd1\xe2\x0c\xd3\x20\xe3\x02\x53\x8b\x33\xa7\x4b\x67\x7d\xb3\x20\x2b\x11\x26\xd7\xcc\xe1\xde\x2e\xc8\x4a\x86\xc8\xb5\x9e\xb1\x26\xf5\xe1\xeb\x82\x13\x9e\x06\x28\x6c\x2b\x4c\x9b\xad\x28\xbf\xcb\x5a\x06\x59\xd7\x9e\x66\xce\xbe\xe6\x12\x2c\x1d\x09\x99\x83\xcd\xf3\x87\x34\x6f\xf6\x3b\x25\x5d\xc3\xdf\xde\xe4\x36\xef\x81\x8a\xa1\x26\xda\x83\xa7\xcf\xd0\xe2\xb6\x0f\x2b\xc7\x8c\x05\x33\xc3\x88\x7b\x9a\x44\xf7\x0d\xe7\xb6\xaf\x63\x1c\x60\xee\x0a\x39\x45\x70\x3f\x18\x61\x9d\x62\x13\x05\x6e\x19\xc5\xd3\x8e\x87\xcd\x3f\xbe\x1f\x0f\xc6\xd4\xb6\x5f\x4f\x9d\xf3\x6c\x5d\xba\x5e\x5c\x87\x92\x21\x64\x2b\x60\xe6\x1b\x0f\x51\x03\x2c\x11\x63\x6e\x03\x00\x1a\x05\xef\xf3\x1c\xea\xd1\x76\x1a\x91\xd7\x4c\xe8\xc7\x29\x9c\x8d\x81\x7f\xfe\x54\xba\xbf\x12\xcd\x39\x21\xac\x0b\x20\xff\x2b\x77\x1c\x35\x61\xa0\xed\x9a\x86\x50\x86\x0a\x30\x5d\x03\xd8\xe0\x7d\x1d\x16\x5a\xa2\x9a\x65\x2d\xa3\x08\x56\xa7\x31\x4e\xdf\x90\x3e\x0b\x88\x1a\x12\x3f\x18\x88\xcf\xdf\x73\xfe\xb2\xde\x1e\x4c\x75\x41\xee\xc1\x04\xcf\x81\x2e\xdd\x2f\x9c\xdf\xa3\xbc\x63\x6e\xdc\xc9\x1d\x44\x86\x34\xaa\x0f\xef\x2c\xfa\x07\x87\x78\xb2\x03\x7c\xaf\x54\xe2\xfa\x44\xa1\xde\x11\x47\xe1\x1b\x6b\x6b\x46\x11\xe2\x11\xb7\xab\xa7\x3e\x3e\xf7\x42\x73\x33\x28\x4f\xec\xe2\x6b\x52\x12\x3b\xcc\xc9\x05\x44\x47\x7e\xfc\x21\x8d\xd5\x05\x09\x98\xec\x8c\x38\x16\xab\xa9\xbe\xdb\x7d\xc8\x02\x41\x56\xc1\xe6\xc7\x5f\xc0\x8e\xb4\x11\xf9\x31\x57\xaf\x48\x42\x64\x67\xb7\x8f\xbb\xae\xf5\x49\xa6\xbf\xe0\x3d\x6e\x23\x59\x26\x81\x0b\xa7\x99\x7c\xd4\x5a\x40\x42\x69\x26\x38\x45\xa5\x9b\x63\x12\x30\x7d\xa8\xc4\x1f\xf6\xd8\xa8\xe4\xd0\x1f\x59\x01\xeb\xf7\x26\xe2\x21\x9d\xe1\x15\x76\x73\x60\x15\xd6\xf3\x97\x23\xf7\x60\x05\xef\x5d\x56\xf0\x5e\xb3\x82\xf7\xfb\xed\x53\xcb\xae\x40\xff\x42\xd4\xdd\x07\x63\x89\xc9\xbe\x70\x94\xde\xa5\x6a\xe2\x83\x03\xa4\x13\x65\xe9\x94\xa5\x89\x88\x20\x66\x6a\x12\x19\xf1\x3d\x0a\xe9\xc6\x1b\x21\x63\x0b\x7a\x1c\xb5\xca\x06\xc3\xe6\xb4\x80\xf9\x2b\xab\xec\x2b\x04\x9d\x0b\xd2\xa6\xaf\x25\x89\x6b\xc5\xf3\xa7\xe0\x83\x18\xb1\xd0\x0b\xfe\x02\xa6\x1d\x03\x55\x57\x32\xdc\x94\x48\xaf\x1d\x42\x01\x2d\x10\xc7\x16\x92\x96\x39\x1a\x1b\x59\x65\x2e\x70\xe9\x7a\x16\xed\xa1\x02\xb8\x19\x07\x05\xbd\x7f\x7c\xb9\x3a\x64\xc7\xf5\x55\x96\x83\xc1\x1d\xba\x91\x8d\xb9\x08\xfa\x38\x61\x41\x3f\x8b\x12\xf6\x5a\xf1\xc2\x21\xc3\x48\xc0\xe0\x87\x0b\xa3\xc1\x42\x52\xa8\x30\xe6\xf1\x55\x8b\x8b\x12\x37\x61\xd6\xd9\x8c\xa3\x54\xfa\xdd\x20\x4e\xde\xef\xf3\x49\xe1\xaf\x76\x7c\x5e\x64\xc6\x92\xd7\x53\xa5\xbf\xb9\x68\xe1\x2d\x7d\x92\xef\xb0\xfe\xf5\x54\x07\xe5\x0b\x43\x20\x77\x74\xdf\x91\xc2\xcf\x4b\xd7\xa4\xb0\x73\xd2\x9a\x2a\x2d\xd0\x7f\x47\xa4\x8d\xbf\x21\xae\xc7\xab\x49\x56\x09\x54\xb6\x10\x38\x39\x30\x36\x7d\xf8\xc5\x3d\x11\x22\x89\x16\x94\x20\xd3\x6d\xb6\x00\x83\x3a\x89\x7f\x3c\x23\x38\xa4\xdd\x04\xcd\x3e\x79\x37\x23\x1e\x23\x8e\xca\x5b\x01\x31\xb9\x0b\x9a\x63\x67\xf5\xf0\x8c\xc2\xca\xdb\xac\xdb\xf5\x41\xf2\xaf\xa3\xa5\x5f\x23\xf4\x10\xc9\x15\xf4\x0f\x84\x1e\x2a\xd8\xf4\xe8\x6e\x4a\xb8\x95\xa0\x3e\xc0\x95\x4f\x69\xdc\xae\x20\x9d\x3b\x53\xbe\x92\x20\x1d\x96\x8a\xa7\x07\x2b\xa5\x24\xf3\x93\x66\xb1\x2e\xc9\xbc\x45\x76\x6e\xa1\x94\xa0\x7e\x23\x21\x9f\xd2\xd4\x72\xc4\x6c\xcc\x6b\x52\x76\x55\xdd\xba\xc9\x0a\x01\x7b\x01\x26\xc3\x2c\x50\x84\xfe\x3c\x48\xb2\x8a\x05\x59\x9d\x41\x86\x24\x13\xdb\x3a\x78\xb0\x58\x40\x86\x32\x29\x56\x39\x0a\xa7\x45\x92\xab\xe0\x6d\xae\x50\xdb\xc2\x79\x54\x50\x25\xd1\xbe\x2c\xbb\x5d\x92\x38\xd5\xe4\x0c\xb7\x4d\x09\xed\xe1\xe8\xc5\x14\x0a\xa7\xd3\x06\x56\x8b\xc4\x19\x45\x28\x8b\xac\xfa\x2e\xa6\xe5\x00\x2e\xeb\xef\x89\xec\xe0\xdf\x93\x7f\xe8\x94\x93\xec\xd7\xe4\x17\xf0\xf7\x44\x1c\xb9\x69\x9c\x38\x6f\xe3\xa8\x5d\xaf\x73\xc0\xbc\xaa\x60\xcd\xf5\xb0\xcf\x89\xd6\x09\x8d\xfd\xa6\xab\x2a\x48\xd7\xde\x32\xdb\x4a\xb8\xb5\xd2\x9a\xb4\x07\x0e\x94\x1e\x8e\x8d\x42\xa6\xf1\x51\xe6\x71\x41\x68\x05\x6d\x86\xca\x9c\xb2\x99\x44\x29\xd6\x36\xfd\x1e\x19\xca\x6b\x8a\x66\x88\xa2\x3a\x47\x7e\xae\x32\x6b\x06\xa4\x99\xb6\x34\xda\xa4\x49\x7a\x83\xe5\xd6\xfe\x35\xe9\xdc\x5d\xf2\x02\xab\x44\x40\x96\x4b\xa4\xaa\x5b\xb3\x5b\x24\x4f\xfd\x4b\xd8\xb2\x5b\x8a\xe7\x73\x44\x51\xe1\x4f\xfd\x12\xb6\x2c\x63\x1a\x3f\x4c\x7d\xbb\xdd\x43\x2d\xbe\x26\x2c\xb8\xba\xbe\x26\x35\x73\x8f\xa7\x73\x05\xd3\x0a\x96\x8f\x69\x8a\x7d\x05\xf3\x3b\x1e\x0a\xd5\x85\x9f\x6e\x9e\x6a\x5c\x66\x65\x9e\xdd\x36\x3f\x4f\x0e\xda\xb2\x84\x5b\xec\x9c\x71\x0b\x03\x60\x58\x9c\x73\xf7\xc3\x2e\x88\x92\x8c\x8b\x53\x5e\x13\xe7\xe8\x17\xe7\x77\x59\x43\xda\xa1\xa6\x4e\xd2\x24\x76\x1e\xe7\x77\xe7\xc5\xdc\xad\x76\xcb\xef\x32\xc4\xa1\x06\x4f\x41\xf5\xe0\xf0\x46\x78\xcc\xe4\x4a\xad\x03\xe2\x9b\x1f\x30\x03\x7f\x49\xe6\x21\x09\x43\xed\x6e\x18\xcf\x23\x45\xb9\x00\x79\x89\x08\x95\x2c\x7c\xd9\x54\xef\x69\xdf\xda\xd1\x27\x30\x73\xa4\x05\x72\x77\x9d\x00\x60\x01\x55\x9d\x94\x24\xf1\x7c\x7d\xa4\x83\xc0\x2c\x46\xea\x02\x07\x03\xba\x8f\x23\x04\xaa\x33\x8a\x22\xd0\x8d\x5c\xb5\x7d\xe1\x28\x42\x4b\x7f\x39\x9f\x53\x34\x87\xde\x31\x9f\xfc\x83\x06\xb6\xaf\xf4\x33\x40\x6e\xa7\x23\x7b\x78\x43\xdc\x05\xcc\x91\x5b\xfd\xc3\xff\x66\x02\xde\x3b\x29\xf1\xb0\x3f\xf3\xb7\x35\x43\x74\x09\xdd\xac\x1c\x10\x23\xa6\x50\x7d\x36\x5b\x3d\x06\x58\x05\x65\xc4\x12\x4f\xa1\x42\xeb\x08\x55\x28\xfb\xb4\x8f\x9d\x5c\x75\x25\xc3\x71\x5b\x78\xfe\x14\x58\x14\x5e\x8a\x94\x21\x4a\x21\x0f\x4a\x80\xba\xbc\x03\x1a\x4a\x96\xb8\x40\xf4\x01\x2f\x75\x83\x20\xcd\x17\x71\xdb\x8d\xe0\x5b\x09\x8e\x5a\x65\x38\x47\xb8\x7f\xa6\xfd\xd0\x11\x7d\xe8\x58\x85\xca\x9a\x80\xe5\x6c\x87\xa2\x26\x8b\x40\xd7\x3e\x45\x14\x73\xa4\xf9\x13\x7d\xff\xc1\xf1\xe2\x0a\x87\x04\x95\x02\x2e\x67\x91\xa4\x19\x51\xf8\x6e\x31\x5e\x38\xae\xb1\x91\xdd\x93\xfc\x53\x41\xbb\xab\xa4\x44\xaf\x76\x80\x5f\x1b\x71\x3e\x5a\xa8\xdc\xa2\x85\xc4\x89\xad\x9c\x55\x39\x79\xa0\x88\xd8\xf0\x27\x1a\xc0\x88\x88\x1d\x83\x18\x9e\x10\x49\x63\x3d\x3a\x87\x02\x47\xcb\x89\x6c\x83\x3e\xd8\x5a\xd5\xdd\x36\xdb\x78\xfc\xf1\x90\xe3\x91\x97\x4d\x35\x1a\xa2\x44\xf0\xb0\xa9\x62\x21\xca\x10\xcc\x8d\x47\x29\x27\xe8\x90\x0a\x28\xae\x29\xc9\x51\xdb\x6a\xb1\x5e\xd7\x64\x15\xff\x40\x14\xeb\xfc\x08\x4d\x23\x51\x31\x25\x0c\x21\xa6\x67\xef\x32\x27\x6e\x07\x99\x69\x05\x13\xe6\xba\x95\x2f\x02\x0e\x5a\x2e\x4c\x46\xf1\xa9\x5c\xc0\xbc\x12\xea\x5d\xfc\x2f\x70\xc9\x02\xf5\xd9\xe2\xc8\x82\x59\x25\xda\x3d\xe5\x7e\xfc\xc3\xee\xb9\x77\xce\x13\xd3\x3b\x7f\xf5\x3a\x92\xb4\xf8\xc8\x8c\x5e\xeb\x42\xdc\x37\x83\xa5\x4c\x8f\x78\x67\xf8\xe6\xfe\xdc\x21\xf5\xe9\x74\x2a\xd4\x23\xb5\x28\xf3\x01\xaf\x52\x35\x6d\xd8\x08\xc5\x15\x00\x0a\x19\xf1\x7d\x7b\x3e\xa0\xcc\xfb\x02\x12\xb2\xdf\x80\xca\xab\x96\xae\x00\x79\x1f\x33\x78\x1b\x33\x8d\xed\x29\xaa\x8e\x06\xcd\x74\x2d\x23\xd5\xab\xb9\x9f\xda\x10\xca\x11\xd8\x6c\x3a\xb7\xb3\x1b\x76\xa3\x43\x04\x5e\x8c\x0b\x9c\x05\x05\x5e\x1c\x24\xf0\x6d\x05\xe7\xc8\x3d\x72\xe1\x7f\xe2\x7c\x26\x33\x0e\x5f\x34\xe5\x43\x27\x5c\x70\x45\x3c\xd6\x8c\x33\x63\x23\x4f\x83\x70\x40\x38\x31\x91\xa7\xb7\x93\x57\x45\xcb\x37\xed\x18\x69\xbd\x5a\x2c\xa8\xa1\x32\x0a\x1d\xa8\x92\xf2\x44\xd2\x1c\xbc\xcb\x62\xca\x78\xcc\x3b\x63\x06\xe5\x37\xbc\xd6\xf6\x0d\xca\x40\x65\x22\x8a\xc1\x69\xf9\x98\x88\x3a\x5d\x22\xea\x1b\x46\x79\x3f\x5d\xd8\x3a\x88\x76\x23\xd7\x38\x65\x38\xec\x08\xaa\xaa\xc4\xd0\x0d\x34\xa0\x80\xe9\xdb\xaf\xfc\x21\xbd\x9a\xe5\x44\x2e\x78\x34\x3a\xdc\xb1\x71\x1f\x63\x17\xda\xd8\xee\xdc\xd2\x9e\x66\x89\x30\x90\x3b\x9c\x58\x9b\x43\xc6\x10\x6d\x4a\xe2\xdd\x22\x38\xcc\x89\x05\xf1\xba\xba\x79\x0f\x2f\x27\xe7\x57\x10\x3b\xe2\xe5\x3e\xc5\x26\xaa\x8b\xb8\xff\x86\xc5\x77\xbb\x2d\xdc\xb1\x71\xcf\xc4\x0f\x8d\x9d\x12\x4d\xf9\xaf\x98\x16\x5d\xc4\xe8\x8e\xf4\xa7\xd5\xe2\xd1\xcb\x24\x93\xcb\x97\xcd\x09\xa2\xf6\x85\x9f\x46\x6e\x0e\x7c\x8a\xdf\x1c\xf0\x51\xf7\x8f\x37\x07\x1e\x6f\x0e\x0c\x65\xf0\xde\x8e\x80\x6f\x0c\x5f\xad\x45\x46\xde\xab\xb1\x22\x34\x9b\xae\x65\x8d\xa4\x7d\x8b\xd8\x6a\x75\xec\xc2\xc3\x16\xd1\x25\xce\x91\x5f\x3f\xff\xfc\x69\xb8\x38\x7f\x45\x61\xd3\x20\xea\x7d\x73\x26\xad\x7a\x47\xe6\xa0\xec\xbe\xcf\x14\xcc\x4a\x53\xa5\x1e\x9d\xdf\xc8\xf7\xb7\x8f\xf7\x11\xc5\xcb\xa1\x50\xa5\x27\x79\xf0\x6e\x45\xe9\x2a\x2b\xd1\x12\x95\x19\x99\xfe\x17\xe5\x0c\x2f\x13\x77\x2e\xee\x8b\x7f\xc4\x68\x15\xf8\x36\x0b\x5a\x39\x1f\x67\x51\x54\x7b\x69\xe3\x92\xbf\xe0\xfb\xfe\xfd\xde\x9e\xd9\xda\x29\x89\xf1\x39\x95\x58\x8b\xf4\xea\x8a\x73\x4a\x09\x7d\xd5\x89\x8f\x64\x79\x45\x16\x88\x23\xb3\xa9\xc4\x0e\xc5\x16\x66\x9b\xa4\xbd\x29\xd7\xc3\x15\x29\x02\xda\xaa\x38\xd4\xd0\x96\xa0\x4a\x2d\xbb\xa8\xd0\x9f\xb8\x2e\xc8\xca\x2d\xe6\xa8\x50\xb6\x52\x08\xeb\x3e\xbf\xd1\xe0\xd8\x13\x91\x0b\xe5\x86\x8b\x8e\xf4\xa5\x87\x20\x7e\xb8\xb8\x74\xcc\x30\xf3\x71\x33\xfd\xb8\x99\x3e\xfc\xce\x0f\xca\x3b\x8a\xd9\x7a\xb4\x57\x63\x44\x35\x62\x2b\x42\xef\xbe\xd3\xee\x7d\xe8\xc6\xc7\x2b\x82\xa7\xdd\xf7\x38\x5e\xf1\xe4\x47\xf0\x0c\x45\x55\xa2\x06\x3e\xaf\xd4\x57\xae\x9a\x4b\x9d\x41\xbd\x47\x18\xfc\x9d\xdf\x9b\x36\x12\x25\x35\x92\x9f\x67\xf4\x8f\xd2\x6a\xbe\xda\x70\x94\x3e\x4f\xeb\x69\xf7\x97\x11\x50\xb6\x12\x61\x7d\xfc\xb6\xa7\xfc\x46\x87\x76\xfd\x02\x00\x0b\xc8\x60\xf4\x60\x2d\x42\x50\xf5\xe0\xe0\x28\x9e\xdf\x37\x14\xb5\x5e\x6e\x9c\xff\xa1\x01\xd5\x7f\xda\x63\x80\xec\xa7\x6a\x91\x87\x13\x9f\x34\xf5\xb6\xcb\x1c\x93\x89\x8f\x9f\x9a\x39\x3b\xe7\xf3\xa7\x87\x69\xfb\x90\x13\x9b\xa3\xa5\xc2\xac\xa0\xef\x52\x5e\xe7\xf5\xab\xaa\x25\xdc\xa8\xa6\x96\x80\xbd\x85\xc8\x76\x5e\x99\xb1\x79\x77\x58\x65\x18\x07\xc2\xbd\x85\x5c\x41\x7a\xe7\xee\x46\x0c\xf3\x53\x58\x03\x59\x09\x50\x28\x9a\x39\xd8\xd7\xed\xb1\x19\x0e\x9d\xdc\xee\x3c\xb7\x1d\xcd\xde\x1e\x29\x2b\x71\x34\x1b\x4b\x0a\x94\x49\x53\xe2\x96\x4d\x8e\x11\x24\x1f\x21\xc2\x7d\x8c\x67\x1f\xe3\x59\x5f\xf4\xce\xf8\x68\xd7\xe9\xd0\xaf\xf1\x29\x73\x92\x49\x45\x61\x8e\x32\x95\xe0\x38\xcd\x51\xec\x79\xbd\xb4\x7a\x85\xea\xa5\x5e\x86\xeb\xe5\x7e\x9f\x1e\x1e\x4b\xfd\x08\x58\x52\xea\x67\x94\x79\x03\x6b\x6f\x7d\x6f\x1b\x58\x5b\x4b\xbb\xa6\x3a\x40\xc0\x82\xac\xde\x60\xc7\xd5\x88\x35\x74\x81\xf5\xdd\x27\x4d\x74\xd0\x22\x2d\xb2\x2c\x01\x01\x48\xc2\x9d\x74\xcc\x81\x42\x2e\x21\x43\x75\xbe\x0e\x5d\xb0\x92\x08\xf3\x66\x95\x84\x1c\x24\xe7\x15\x45\xf0\xae\x20\xab\xc0\x2d\xce\xa9\x46\x0d\xb2\x06\xf2\x83\xa4\x9d\x19\x5f\x59\xf4\x05\x9a\xdf\x60\x34\x2f\xa8\x9a\xe0\x83\xc4\x7e\x50\x3f\x7b\x61\xfc\xe6\x80\x21\xb6\xff\x51\x0c\xf9\x03\x04\x83\x5c\xab\xd5\xfe\x72\xf1\x17\x14\xb8\x5c\xc8\x43\x2c\xe7\x66\xa1\x41\xb9\xbf\xbd\x9f\xe2\x1a\x63\xcc\xd9\x59\x48\xf5\xfd\xfe\x76\x85\x59\xbe\x18\x21\xe5\xff\x95\xc9\x7b\xd5\xa2\x40\x0e\xe7\x31\x07\x2a\xf2\xf6\x96\xe3\xdc\xf1\x93\x24\xf2\x2f\xe5\x87\x49\xb4\xf8\xd0\xaf\x13\xc8\x3f\xeb\x37\x0a\x34\xfd\xe0\x96\xad\x1f\x2b\x08\x2f\xb4\x81\x6f\xf5\x6b\x8a\xb1\x2f\xf6\x07\xa4\x79\x9f\xee\xdf\x6b\xdd\x35\x64\xd4\xa8\x65\xa8\x38\x70\x3b\xe3\xe0\xe5\x87\x23\x4c\x63\x91\xff\xee\x78\x85\x5d\x3f\x2a\xa1\x06\x43\x90\x6d\x9f\xfc\x2f\x00\x00\xff\xff\xf2\x6b\x9b\x9c\xb7\x66\x00\x00")

func tmplDashboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDashboardTmpl,
		"tmpl/dashboard.tmpl",
	)
}

func tmplDashboardTmpl() (*asset, error) {
	bytes, err := tmplDashboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/dashboard.tmpl", size: 26295, mode: os.FileMode(0644), modTime: time.Unix(1597656300, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0x8f, 0xc3, 0xef, 0xdb, 0x34, 0x14, 0xbd, 0x5a, 0x5, 0xbd, 0xc7, 0xed, 0x77, 0x45, 0x17, 0x1f, 0x25, 0x65, 0x15, 0x2e, 0x93, 0xf7, 0x9a, 0x43, 0xec, 0x85, 0xd6, 0xbb, 0x90, 0x3e, 0x9c}}
	return a, nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xc1\x6e\xe3\x2c\x10\xc7\xef\x7e\x8a\x91\xcf\xdf\x97\x27\x68\x0f\xab\x36\xab\xe6\xb0\x89\xb6\x8a\xd4\xc3\x6a\x85\x90\x99\xc4\xa8\x04\x52\xc0\xb1\x22\x96\x77\x5f\xd9\x40\x6c\x1c\xda\xcd\xc9\xf3\x9f\xff\xfc\x98\x0c\x63\x6b\x34\xaa\xd3\x0d\x42\xcd\xa8\xa5\x4c\x1d\xc9\x49\x49\x6e\x95\xae\xa1\x66\x8c\x38\x07\xab\x0d\x03\xef\x6b\x70\x15\x80\xa4\x27\x84\xfc\xf7\x08\xce\x01\x9a\x86\x9e\xf1\xa9\xa5\x9a\x36\x16\xb5\x81\xd5\x76\x70\x7a\x5f\x01\xd8\xeb\xf9\xbe\xa6\x1e\xc0\xfb\x21\xe3\x7d\x5d\x01\x38\xf7\x3f\xf0\x03\xac\xf6\xf4\x68\x62\xd9\xf0\xb4\x2c\xfb\xe5\x9c\xa6\xf2\x88\xc1\xe8\x7d\xf1\x68\xef\xff\x73\x0e\x25\xf3\xfe\x77\x24\xa3\x64\x01\x7a\x42\x63\xe8\x11\x73\xe8\xc3\xc3\x7a\xb7\xaf\x86\x86\x7e\xc4\xb4\xf7\xd5\x20\xc1\x08\x17\xd4\x72\x25\x49\x2a\x9d\xfb\x77\xe7\x21\x65\x56\xeb\x9b\x6d\x41\xa8\x00\x3e\x3a\xd4\xd7\x30\xa5\xd5\xcf\xf1\xf9\xcf\x7d\xcf\xde\x57\xb1\xd5\x9e\xdb\xf6\x06\x0e\x4d\xa7\xd9\x6c\x95\xe5\x87\xeb\x56\x3d\x53\x4b\x43\x46\x8e\x0a\x91\x8a\x0c\x97\x77\xbb\x8d\x82\x33\x9b\x42\x02\xbe\x62\x00\x6c\xa4\x45\x7d\xa1\x22\x64\x75\x54\x09\x4f\x72\x80\x96\xdd\x45\x70\x38\xff\x5b\xc7\xb8\xcd\x1a\xa5\xa3\x32\xef\x71\xe6\x29\x92\xf6\xfc\x84\xaa\xb3\x2f\x71\x27\x42\x44\xda\xc8\xc8\xb3\x45\xc0\x46\x36\xa2\x63\x38\xed\x15\x0f\x02\x19\xf7\x2b\x60\xe6\x9e\x2f\xc7\xf5\xd1\x71\x8d\xdf\x3b\x21\xde\xb8\x64\xaa\x4f\xf3\x1a\x65\x72\xe8\x84\x20\x7d\x48\xa4\x89\x15\x0b\xca\x23\xc3\xfe\x45\x19\xfb\x8c\x82\x5e\xe3\xcc\xb0\x27\xad\x32\x96\xb0\x51\x8b\x53\xbb\xb3\x15\x69\xeb\x0b\x15\xdd\xb8\x90\x33\x27\xde\xc4\x0c\x59\xf4\xce\xa8\xf3\xdb\x68\x35\x9a\x56\x09\x36\xdb\xcc\xb0\xb0\xcb\x8c\x9d\xe2\xc7\xf1\xcb\x31\x41\x76\xef\xc1\x02\xa0\xde\x63\x0b\x93\x94\xfd\x9b\xa9\xe6\x8d\x6a\xc9\xe5\x31\xc9\x7d\x0c\x43\xf5\x22\xf9\x35\xe2\x15\x1b\x75\x19\xde\xc2\x1c\x45\x74\xd2\x33\xe6\xd2\xfd\x09\xfb\x49\x73\xcb\x9b\xf4\x4a\x00\x34\x29\x0e\xb0\x65\xfa\x1f\x94\xe5\xa1\x89\xb6\xec\xf1\x33\x7f\x86\x2f\xae\x48\x29\xa8\x7c\xf5\x37\x00\x00\xff\xff\x04\x8a\x39\x87\x0c\x06\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1548, mode: os.FileMode(0644), modTime: time.Unix(1597657642, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x19, 0x3a, 0x9f, 0x4a, 0x2c, 0x34, 0x55, 0xfd, 0x94, 0x8f, 0x0, 0x93, 0xfd, 0x10, 0xd2, 0x18, 0xce, 0xa5, 0x51, 0x87, 0xae, 0x8f, 0xcf, 0x9d, 0xd6, 0x12, 0xde, 0x4c, 0x8f, 0x42, 0x65}}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdb\x72\xdb\x38\x12\x7d\xf7\x57\xa0\xf4\xbc\x71\xbe\x20\x0f\x8e\x9d\x8b\xab\xec\x8d\xd7\x72\x9c\xdd\x9d\x9a\x62\xc1\x64\x8b\x42\x99\x24\x14\x00\x94\x2d\x6b\xf8\xef\x53\xb8\x37\x28\xde\x32\x35\xe3\x17\x0b\xe7\x34\x4e\xe3\xd2\x6c\xdc\x04\x48\xde\x8a\x1c\xc8\xaa\xa0\x8a\x16\xbc\xcc\x64\x2e\x00\x9a\x27\x4e\x45\xb1\x22\xab\xe3\x91\x9c\x5f\x17\xa4\xeb\x56\xe4\x78\x46\x88\x62\xaa\x02\xf2\xc1\xe2\x0f\xa6\xd0\x75\xab\x33\x42\x8e\xc7\x77\x84\x6d\xc8\xf9\x3d\xd0\xe2\x5b\x53\x1d\x48\xd7\x9d\x11\x22\x80\x16\x19\xd7\xc5\x0f\x44\xd7\x48\x59\x5d\x07\x9a\x22\x16\xb4\xc0\x7a\x4b\x05\x38\x4c\xda\xdf\xb6\x2e\x26\x06\x6b\x3e\x40\xbd\xab\xa8\x82\x47\x2a\x18\x7d\xaa\x40\x46\xfa\x85\xa9\xed\xa4\x81\xa0\x4d\x09\xe4\xdc\x02\xca\xd9\x65\x7b\x67\x68\xba\x4e\x48\x43\x6b\xd0\xff\x5d\xf7\xff\xad\x8b\xb6\xf7\x84\xec\x04\x6c\xd8\x6b\xe0\xee\x6c\xd1\xb3\x05\x6c\x68\x5b\x29\xcf\x5e\xb9\xa2\x1e\xd5\x33\x42\x06\x7b\x34\x54\x48\x7a\xf3\x83\x15\x25\xa8\xb1\x3e\xbc\x18\xd6\x35\x5c\x1d\x76\x71\xd2\xf4\x6f\xdf\xae\x57\x8f\xfe\x37\x40\x07\x0f\xfd\x2f\x40\x61\x80\xdd\x7c\x5b\xcd\x93\x48\x78\x80\x57\x95\xd4\x09\x5d\xe8\x49\x5c\x54\xac\x6c\x12\x9d\x8c\x1a\x08\xab\x79\xa3\x79\xb9\x35\x7b\x4b\x5b\x95\x49\x8d\x60\x31\x67\x32\xa9\xf5\x15\x58\xb9\x55\x1e\xdd\xda\x92\x13\x09\xdc\xa4\xc2\x0f\x56\xa8\xad\x07\x5f\x4c\xc1\xd5\xf7\xcc\x74\x67\xec\xf8\xd9\x7e\xe8\xdf\xbe\x07\x0b\xc6\xf5\x92\x57\x5c\x78\x30\x37\x05\x57\xdb\x33\x33\xe3\x58\x03\xc6\xdc\xf7\x82\x50\xa5\x7f\xdb\x68\x22\xa4\x62\x7b\xc8\xe4\x8e\x86\x19\xbb\x61\x7b\x58\xeb\xb2\xf7\xd3\x8d\x79\x1b\x74\x5e\xc1\x15\x6c\x86\xfc\x27\x84\x62\x15\x64\x05\x6c\x42\x33\xbc\xc0\x23\x7b\xf3\x36\x84\xec\xd9\x9b\x6f\x95\xc5\x57\xc8\x1a\x79\x47\x63\xd7\x4a\xc5\xeb\xef\x0d\x53\x91\xcb\x0d\x96\xb5\x1a\xf4\x03\x89\xcd\x66\x45\x2f\x5a\xc5\x65\x4e\xe3\xf7\x42\x08\x0d\x90\x53\xc4\x36\xb3\x82\x3a\x0a\x92\x0f\xc7\x06\x49\xef\xcb\x41\x46\xb3\x8a\xf7\xf0\xb3\x05\xe9\x33\x48\x3a\xf4\xc3\x5c\x92\x61\xf4\x9f\xb0\x66\x61\x46\xa2\xf8\x7f\x5a\x10\x87\x68\x48\xc8\x4f\xdf\x46\xcf\xac\x92\x3a\x49\x0b\x51\xaf\x6d\xb6\x0a\xf8\x68\x26\x9b\xd1\x31\x4e\xfb\x62\x3f\x35\x98\x61\x49\x6c\xb6\x48\xf7\x16\x94\x60\x39\x66\x6a\x8b\x38\xc1\xc0\x2f\xeb\x2d\xbc\xaa\xcf\xac\x52\x20\x92\x3e\xeb\x69\xde\x58\x18\xcd\x73\x30\x5c\x24\x7d\xc3\x6a\x1c\xdf\xfa\x1b\xae\x63\x6c\x7b\x76\x91\xd4\x45\x59\x0a\x28\xa9\xe2\x49\x2b\x69\x44\x7d\x78\x63\xbb\x45\xca\x97\xbc\xde\x51\x01\x0f\x1c\x93\xb9\x05\x33\xc5\x63\x4a\x8b\x66\xcb\x74\xb7\x3a\x70\xfb\xd3\x9f\x1b\x34\x99\xff\xc4\x70\x91\xf4\x37\x51\x80\xf8\x98\x44\x3a\xd7\x50\xf6\x14\x16\xd2\x68\xb2\x5c\xf1\x8a\x89\x53\xc9\x82\x89\x44\xd3\x1a\x2d\x12\xfd\xf4\xaa\x04\xbd\xe4\x15\xe6\x40\x63\x59\xce\x2b\x2f\x8a\x8c\x16\x89\x5e\x37\xb9\x00\x2a\xe1\x0b\xe7\x09\xcf\x1c\x9e\x95\x9a\x70\xe2\x3d\xe3\x85\xf1\xd0\x14\x4c\x31\xde\xd0\xea\x33\x17\x35\xc5\xf9\x08\x67\xab\x01\xbb\x77\x3d\xc3\x93\xd4\xa5\x03\x2b\xd4\xca\x36\xa6\x1a\xca\x63\x23\x4b\xab\xaf\x39\xba\xc0\x8e\xf6\x29\x0a\xde\xd1\x0a\x94\x82\x94\xdc\x39\xd0\xef\x1f\x83\xcd\x62\x59\xfb\x55\xf4\x3f\x4b\xff\xfd\xe0\x0f\x33\xb1\x5c\xac\x7f\xdd\xec\x41\xa8\x94\x63\x16\x0b\x53\xec\x2c\x16\x6b\x3e\xd2\xaa\xed\x0d\xc4\xde\x40\x7e\x05\x77\xfc\xf2\x46\xd6\xb4\x84\xef\xf7\x37\xbd\x66\x6a\x34\x6b\x45\x88\x74\x64\x36\x23\xdd\x0d\xc4\x29\x99\x8b\xdd\x91\x70\x5e\xab\x43\x05\xc3\x11\x7c\x42\x49\x03\x0c\xc5\xe3\x3f\x14\x3e\xfd\xec\x38\xb3\xd6\xce\xa8\x25\x5b\x61\xfb\x37\xb1\x21\x1e\x1f\x7d\xf2\xfe\xbd\x19\x89\xbf\x38\xe2\x0f\xb4\xb4\xcb\x64\x92\x38\x14\x2d\xdd\x7a\x2a\xc9\x07\xf2\xdb\xf1\xe8\x92\x43\xb4\xee\xba\xd5\xf1\x78\xde\x75\xab\x7f\x1d\x8f\xd0\x14\x5d\xf7\xfb\xb8\x37\xdd\x46\xb7\x0f\x9a\xda\x71\xcd\x03\x26\x4f\xef\xa1\x49\xb2\x57\x0c\x91\x41\xea\x24\xad\x81\xb6\x42\x71\x33\xba\xed\xd2\xcd\x36\xc6\xbd\x26\xbd\x3b\x69\xe4\x30\xd2\x6b\xf8\x2d\x15\xcf\xc9\x30\xc7\x86\x0f\x52\x27\x0d\xaf\x8d\xd5\xc0\x4e\xf2\xef\xda\x02\xde\xd0\x27\x48\xd6\xbf\xca\x00\x7e\x07\xe4\xd8\x45\x52\x27\x69\x6b\x26\x69\x0d\xc6\xcc\xd0\xe0\x2f\x8e\x18\x2d\xe0\xcf\x43\x67\x03\xfc\xc4\x11\x33\x39\x2e\xeb\xad\x65\x72\x5a\x8e\x06\x93\x07\x46\x7c\x5a\xc2\x87\xa4\xe4\x78\x34\x52\xf7\x4e\x40\xce\x24\xe3\xe1\x24\xb3\x0b\x40\xbc\x3d\x09\x16\xb3\x47\xe6\xf4\x36\x61\xc1\x91\x68\x44\xeb\x33\x6f\x92\xb1\xd9\xf0\x26\x1d\x1b\x64\x30\x29\x74\x51\x81\x50\xd7\x57\x1e\xa6\xba\x98\xb1\xb0\x11\x8a\xf4\xb4\x4a\xab\xf8\x3d\x6c\x04\xc8\x90\x47\xf5\x01\x32\x13\x0e\x43\x67\xc8\x68\x36\xa9\x78\x03\x25\x42\x2b\x5b\xf2\xe1\xef\xb9\x05\x0a\x78\x90\xac\x4a\x32\x4c\x89\xd1\xa4\x5c\x72\x46\x34\x87\xb1\xe1\x64\x35\x16\x83\x71\x99\x47\x4b\x3b\x5e\xd5\xc7\x2e\x4b\xb6\x90\x3f\x87\xcb\x12\x53\x08\xfb\x7f\xcb\x4c\x56\xff\x22\x78\xbb\x63\x4d\xe9\xf1\xd2\x97\x9d\x08\xe2\xe7\x75\x12\x91\x44\x61\xfe\xce\x26\x7f\xbe\xe3\x32\xde\x8e\xe4\xcf\xd9\x8e\xcb\x78\xef\xe5\xe9\x59\x95\x4f\x45\x09\x89\x0c\x68\x00\xe9\x38\x83\xe9\xeb\xb3\x87\xdb\x30\x1d\x5b\x55\x87\xf9\x70\xf8\x6c\x23\x70\x03\xb0\xef\xb9\xba\x1f\xcb\x1c\x6f\xd0\x9f\xca\x64\x73\x1e\xd9\x49\x11\xb3\xb6\xe2\xb8\x36\xc9\x39\x09\x6b\x6c\x32\xa9\xb5\x66\x6f\x28\x38\xa4\x2d\x39\x91\xc0\x4d\x2a\xdc\x52\x51\xb2\x90\xd2\x6a\x5b\xf2\x17\x0a\x9e\x9b\xee\x4f\xb3\x0f\x3d\x69\xf6\xa1\x0b\x06\x9d\x6e\x3c\x88\x3d\xcb\xc1\xfd\x0b\x9d\xb0\xc5\xcc\xfd\x0f\xbd\xe9\x1b\x2f\x91\x76\xb7\xe6\x89\xae\xb9\x58\x4f\x45\x93\xcb\xf5\xf1\x91\x86\x47\x10\x78\x29\xd1\x33\x96\xed\x1d\x16\x07\x1d\x99\x4d\x27\x38\x7a\xe0\xad\xea\x69\x56\x06\xec\xab\xf6\x4d\xa7\x67\xb4\x95\x6a\xbd\xe5\x2f\x5f\x59\x3c\xc2\xd6\xad\x54\x99\xdc\xf2\x97\x6c\xab\x51\x3f\xbf\xa9\xe5\x22\xd5\x4f\x42\x70\x31\xa0\x0b\x16\xef\x29\x07\xeb\x45\xda\x37\x54\x41\x93\x1f\x4e\xc5\x2b\x47\xf4\xd4\xa3\xfd\x22\xf9\x8f\x02\xe8\x73\xc1\x5f\x9a\x53\x07\x4f\x81\xea\xb9\xc0\x75\x16\x39\xb9\x62\x52\x09\xf6\xd4\x2a\x34\xa9\xd1\x4f\x81\xd9\x9e\xab\x5e\xcd\x45\xde\xee\xdd\x8b\xda\x0d\x93\xea\xd4\x9b\x7f\x6f\xcb\x2a\x4d\xf7\xdc\xf5\xaa\x4e\xba\xbb\x62\x72\x57\xd1\x83\xbd\xef\xf0\x64\x61\x41\x7f\x9d\xe1\x9f\x9b\x7a\xa6\xf3\x2f\x09\x77\x02\x36\x20\xa0\x89\x29\xc0\xa4\xd1\x6c\x17\x71\x7c\xfb\x91\x98\x4f\xaf\x12\xac\x80\xff\x83\xe0\x97\xbc\x6d\xe2\xa7\xb0\x65\x05\x64\x6f\x20\x78\x96\x5b\xdc\xaf\x1d\x7d\xeb\x99\xb4\xd9\xd0\x12\xd6\x8a\xaa\x56\xea\xd1\x4c\x9e\xab\x6a\x43\x66\xd2\xb0\x76\x2a\x92\x17\xac\xb1\xca\x8b\x3d\xe2\x27\xb0\x01\x8f\xf6\x61\x0a\x3f\xeb\x8c\x55\xfe\x35\x8f\x78\xd1\x1a\xf2\x88\x97\xb0\xb1\xca\xbf\xe6\x31\xd9\x6f\x0f\xb9\x4c\xb6\xdf\xa3\xd5\xa7\x8f\x08\x54\xd0\x5a\x62\xd4\x1e\x25\x53\x7c\x67\x4b\xfd\xe7\xa0\x35\xc7\xd7\x54\x92\xc7\x0b\x2a\xc7\x2c\x7a\x6b\x89\xe8\xe8\x5b\xdc\x84\x82\x89\xd8\x08\x9b\xb0\x8e\x9f\x8c\xe5\x66\x45\xd6\x8a\x26\x3d\x31\x45\xdf\x15\xc7\x8d\x88\x8c\x9e\x02\x87\xbf\xf8\xb6\x6e\x24\xfa\xd2\x4d\xd1\xbe\xba\x7b\xf2\x0f\x02\x32\xa7\x3b\xb8\xdc\x52\x41\x73\x7c\xa3\x32\xb6\x94\xf2\x52\x42\x68\x7d\x65\x4b\x7e\xed\xf4\xdc\x40\x10\xe8\x93\xad\x7d\xbc\x9e\x78\x08\xef\xce\xfe\x0c\x00\x00\xff\xff\xd2\xc2\xd5\xc0\xb8\x20\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8376, mode: os.FileMode(0644), modTime: time.Unix(1597229994, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xae, 0x4b, 0x1b, 0xd5, 0x4a, 0x7b, 0xf9, 0x3, 0x4b, 0x12, 0x2, 0xd6, 0xe0, 0x6, 0xfe, 0x8c, 0x15, 0x4c, 0xb9, 0x48, 0xaf, 0x52, 0x1e, 0x71, 0x5a, 0xfe, 0xf3, 0x82, 0x86, 0x77, 0xd3}}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\x42\x0e\xbb\x40\xec\x07\x58\x20\x87\x6c\x02\x07\x0b\x6c\xdb\x34\x09\xd2\x43\x51\x08\xb4\x34\x52\x88\x52\x3f\xa1\xa8\x24\x0e\xc1\x77\x2f\x38\xfc\x93\x6c\xc5\x3d\xd4\x27\xce\x37\xdf\xfc\x72\x86\x96\xc4\xa1\x1b\x65\x81\x90\x95\x4c\xb1\xb2\xab\x73\xc5\x1b\xdc\x75\x4c\x96\x19\x64\x5a\xc3\xe6\xbf\x12\x8c\xc9\x40\xaf\x00\x14\x57\x02\xc1\xfd\x2e\x9c\xf6\x81\x20\x63\xb2\x15\x40\x89\x43\x21\x79\xaf\x78\xd7\x06\xf5\xf5\x04\x72\x24\x89\xac\xcc\xbb\x56\xec\xc9\x87\xe5\xdc\x21\x2b\xbf\x58\x60\x6d\xcc\x0a\x40\xeb\x57\xae\x9e\x60\x73\x23\x59\xff\x34\x44\x50\xb2\xb6\x46\xd8\x00\x89\xb5\xd5\x51\x4a\x21\xa9\x85\x74\x92\xab\x6b\xac\x78\xcb\x29\x09\xe7\x0e\xe0\x85\xbf\xa7\x22\x1e\xf9\xbb\x55\x04\xa3\x35\xf0\x0a\x36\x97\xa3\xea\x86\x82\x09\xb4\x2a\x16\x05\x6f\x92\xb4\xc6\x64\xd6\x04\xdb\xd2\xbb\x0e\x0e\x6e\x25\x16\x7c\xf0\x41\xfb\x28\x78\x07\x49\xfb\xa1\x83\x1b\xd9\x8d\x3d\x75\xa0\xb6\x27\xb8\x80\xef\x5a\x9f\xd5\x0e\xfd\xe7\x22\x10\x8c\x09\xdd\x39\xe3\x6d\x89\x6f\xe7\x70\x86\x02\x9b\x03\x06\xaf\xbc\xda\x98\x73\xad\x29\x58\xa6\x35\x31\xe9\x44\xc8\x8f\xe5\x44\xee\x8b\xae\x47\x4a\x64\xb0\x27\x9f\xc8\xe0\x50\x1b\xc6\x11\x4e\x25\x92\x18\x7f\x94\x88\xda\xbb\xfb\x20\x74\x20\xc9\x4d\x01\x40\xcf\x04\x2a\x85\xb3\xe9\x24\xfe\xe6\xd6\x6b\xc2\x0d\x47\x6e\x5e\x09\xde\x2f\x72\xb7\x56\x11\xf8\x66\x39\x99\x4f\x4c\xfe\x44\x49\x6d\xb1\x90\x1b\xb5\x19\xe8\x67\xd6\xdb\x35\xa4\x8a\xf9\xaa\x7d\x8f\x69\x8d\xac\x90\xf2\x7b\x61\x62\x8c\xa3\xf6\x48\x42\x52\x6a\x4d\xe1\xff\x67\x3b\x14\x36\x8e\xa0\x83\x27\x3b\xf4\x68\xa4\x52\x09\xc7\x87\x58\x94\xab\xe0\x0e\x9f\x47\x1c\xd4\x62\x09\xd2\xe9\x62\x0d\xcf\x93\x5e\x7f\x1d\x51\xee\xd3\x1a\xc5\x3c\xa9\xb4\xb5\x31\x54\xef\x41\xb9\x5a\xdb\x14\xc0\x7b\x8f\x26\x97\x75\x2d\xb1\x66\xaa\x93\x2e\x09\x0b\xb6\x08\x59\x06\x7f\x5d\xe3\x1d\x56\xf7\x4a\xf2\xb6\x9e\xf2\xfe\xa6\x25\x4d\x66\x61\x4b\x13\x12\xa3\x91\x43\x1b\x75\x7d\x18\x36\x4e\x97\xd6\xbe\x17\x0e\x89\xbc\xf9\xc0\x59\x3b\xda\x73\x3f\x5e\x76\xcb\xfd\x31\xec\x78\x1a\xbc\x79\xb7\x93\xf1\x37\x5e\xaa\x27\x6b\xfa\x4a\x07\x6f\xe8\xd0\x13\x66\xa7\x9b\x3a\xb7\x99\x54\xe9\xcb\x0e\x8d\x88\x0a\x37\xd0\x57\x5d\x5b\xd2\x2b\xc9\xc4\xb6\x93\x0d\x53\x03\x4c\x47\xfb\x43\x75\x78\x9a\x53\x43\x8b\x44\xcd\x2b\xe2\xce\xba\x06\xd3\xb6\x9d\xee\xda\x7c\x3e\xac\xe7\xa6\x67\x72\x7a\xc7\x57\x09\x49\xb3\x97\x8a\x0a\xdb\xb3\xbc\x52\xc7\x01\x62\x33\xc6\x41\x75\xcd\xbf\xf5\x55\x27\xc8\x73\x41\x72\xbe\xab\xf3\x82\x90\x10\xfd\x80\xf6\x5b\x8f\xdb\x43\x8f\xd5\xa2\xc7\xed\xc7\x1e\xa7\xd7\xe6\x14\x4b\xa7\x55\xa2\x1e\x6f\xfa\xb2\x64\xfc\xe3\x3b\xc5\xd2\xf5\x3f\x60\xd3\x0b\xa6\xf0\x91\x49\xce\x76\x02\xe3\xc3\x37\xf9\x67\xb6\xdf\x08\x9e\x96\xbf\x78\x9e\xbf\xf9\x96\x35\x38\x79\x2d\x3e\x5b\x31\xdc\x57\x2f\xb1\xe2\x6f\x30\xf9\x6b\xb4\x62\xd0\x96\x58\xb1\x51\xa8\xf4\x49\xe1\x44\xfb\x51\xb2\x98\xb4\x59\xfd\x0a\x00\x00\xff\xff\xe4\xf8\xa0\x0f\xd5\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2261, mode: os.FileMode(0644), modTime: time.Unix(1597229994, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xea, 0xbe, 0xce, 0x31, 0x3c, 0x96, 0x4, 0x13, 0x38, 0x42, 0xae, 0x47, 0x3d, 0x5, 0xeb, 0x1d, 0xfd, 0x8b, 0xae, 0xfa, 0x12, 0xdb, 0x5f, 0xb4, 0xfa, 0x96, 0xf, 0x62, 0xec, 0xe8, 0x19}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/dashboard.tmpl":   tmplDashboardTmpl,
	"tmpl/monitor.tmpl":     tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl":   tmplTimeboardTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"dashboard.tmpl":   &bintree{tmplDashboardTmpl, map[string]*bintree{}},
		"monitor.tmpl":     &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl":   &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
